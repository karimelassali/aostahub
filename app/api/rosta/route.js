import { google } from '@ai-sdk/google';
import { generateText } from 'ai';
import { NextResponse } from 'next/server';

let chatHistory = [];

/**
 * Updates the chat history with a new message and maintains a maximum of 10 messages.
 *
 * @param {string} role - The role of the message sender (e.g., "user" or "bot").
 * @param {string} content - The content of the message to be added to chat history.
 */
async function updateChatHistory(role, content) {
    chatHistory.push({ role, content });
    if (chatHistory.length > 10) {
        chatHistory = chatHistory.slice(chatHistory.length - 10); // Keep last 10 messages
    }
}

/**
 * Handles incoming POST requests to the /api/gemini endpoint.
 *
 * Request body must contain a JSON object with the following properties:
 * - `prompt`: The user's input to be sent to the AI model.
 * - `imgPrompt`: The URL of the image to be sent to the AI model, if any.
 *
 * The endpoint returns a JSON response with the following properties:
 * - `response`: The text generated by the AI model.
 * - `error`: An error message if there was an error generating text.
 * @param {NextApiRequest} req
 * @returns {Promise<NextApiResponse>}
 */

/**
 * Handles incoming POST requests to the /api/gemini endpoint.
 *
 * Request body must contain a JSON object with the following properties:
 * - `prompt`: The user's input to be sent to the AI model.
 * - `imgPrompt`: The URL of the image to be sent to the AI model, if any.
 *
 * The endpoint returns a JSON response with the following properties:
 * - `response`: The text generated by the AI model.
 * - `error`: An error message if there was an error generating text.
 *
 * @param {NextApiRequest} req
 * @returns {Promise<NextApiResponse>}
 */
export async function POST(req) {
    try {
        // Parse the request body as JSON
        const { prompt, imgPrompt } = await req.json();

        // Prepare the content to be sent to the AI model
        const content = [
            {
                type: 'text',
                text: `
                    You are Rosta, a bot on Aosta Hub by Karim El Assali. Reply concisely and make the whole answer in the same language as the user's request.
                    History: ${JSON.stringify(chatHistory)}
                    Request: ${prompt}
                `,
            },
        ];

        // If an image is provided, add it to the content array
        if (imgPrompt) {
            content.push({
                type: 'file',
                data: `https://giyrlrcehqsypefjoayv.supabase.co/storage/v1/object/public/aiFiles/${imgPrompt}`,
                mimeType: 'image/*',
            });
        }

        // Generate text using the AI model
        const response = await generateText({
            model: google('gemini-1.5-flash'),
            messages: [{ role: 'user', content }],
        });

        // If the AI model generated text, update the chat history
        if (response) {
            await Promise.all([
                updateChatHistory('user', prompt),
                updateChatHistory('assistant', response.text)
            ]);
        }

        // Return the generated text as a JSON response
        return NextResponse.json({ response: response.text });
    } catch (error) {
        // If there was an error generating text, return it as a JSON response
        // with a 500 status code
        console.error(error);
        return NextResponse.json({ error: 'Error generating text' }, { status: 500 });
    }
}
